Option Explicit
Sub Clear_data()
    
    Application.DisplayAlerts = False
    Worksheets("Send_Mails").Rows("5:999999").Delete

End Sub

Sub Break_Files()
    Dim sh As Worksheet
    Dim emailList As New Collection
    Dim row As Integer
    Dim lastRow As Integer
    Dim lastCol As Long
    Dim firstCell As Range
    Dim filterRange As Range
    Dim folderPath As String
    
    Set sh = ThisWorkbook.Sheets("Send_Mails")
    sh.Range("B2").Value = "Progressing..."
    sh.Range("B2").Interior.Color = RGB(255, 255, 255)
    
    lastRow = Application.CountA(sh.Range("D:D")) + 1
    lastCol = sh.Cells.Find("*", SearchOrder:=xlByColumns, SearchDirection:=xlPrevious).Column
    
    Set firstCell = Range("FirstCell")
    Set filterRange = Range(sh.Cells(firstCell.row, firstCell.Column), sh.Cells(lastRow, lastCol))
    
    folderPath = getFolderPath()
    
    Application.ScreenUpdating = False

    If Dir(folderPath, vbDirectory) <> vbNullString Then
        'check if folder already existed
        If MsgBox("Folder already existed!" & " " & folderPath & ". Do you wish to Delete and Re-create new?", vbYesNo + vbQuestion) = vbNo Then
            'If No exit code
            Exit Sub
        Else
            'Else remove old files, then create new folder
            On Error Resume Next
                Kill folderPath & "*.*"
            On Error GoTo 0
        End If
    Else
        MkDir folderPath
    End If
    Application.ScreenUpdating = True

    'loop through the name column and store unique emails in a collection
    For row = (firstCell.row + 1) To lastRow
        On Error Resume Next
            emailList.Add Item:=sh.Cells(row, firstCell.Column), key:=sh.Cells(row, firstCell.Column)
        On Error GoTo 0
    Next row
    
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    Dim index As Integer
    
    For index = 1 To emailList.Count
        On Error Resume Next
            Dim strFileName As String
            strFileName = getFilePath(emailList(index)) 'folderPath & "\" &"Send-Forecast-toSupplier"& emailList(index) & ".xlsx"
            
            [valTo] = emailList(index)
                
            filterRange.AdvancedFilter Action:=xlFilterCopy, _
                criteriarange:=Range("Criteria"), copyToRange:=Range("Extract"), Unique:=False
            Range(Range("Sub_Extract"), Range("Sub_Extract").End(xlDown)).Copy
            Workbooks.Add
            ActiveSheet.Paste
            ActiveWorkbook.SaveAs Filename:=strFileName, _
                FileFormat:=xlOpenXMLWorkbook, CreateBackup:=False
            ActiveWindow.Close
            Range(Range("Extract"), Range("Extract").End(xlDown)).Clear
        On Error GoTo 0
    Next index
    [valTo] = "DONE!"
    sh.Range("B2").Value = Format(Now, "dd-mm-yyyy, HH:mm:ss")
    sh.Range("B2").Interior.Color = RGB(0, 255, 7)
    
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    MsgBox "All the file have been saved successfully"
End Sub


Sub Send_Mails()
    Dim sh As Worksheet
    Set sh = ThisWorkbook.Sheets("Send_Mails")
    Dim i As Integer
    Dim rng As Range
    Dim rng2 As Range
    Dim OA As Object
    Dim msg As Object
    Dim emailList As New Collection
    Dim folderPath As String
    Dim strAttachFile As String
    Dim mailContent As String
    Dim mailSignature As String
    
    Dim firstCell As Range
    Set firstCell = Range("FirstCell")
    
    sh.Range("B3").Value = "Sending..."
    sh.Range("B3").Interior.Color = RGB(255, 255, 255)
    
    Set OA = CreateObject("outlook.application")
    
    Dim last_row As Integer
    last_row = Application.CountA(sh.Range("C:C")) + 1
    
    folderPath = getFolderPath()
    
    'check if folder already breaked
    If Dir(folderPath, vbDirectory) = vbNullString Then
        MsgBox "Attach Folder doesn't exist. Please Break files first!"
        Exit Sub
    End If
    
    'loop through to send emails
    For i = (firstCell.row + 1) To last_row
        On Error Resume Next
            If Contains(emailList, sh.Range("C" & i).Value) Then
                sh.Range("B" & i).Value = "Duplicate - OK"
            Else
                Set msg = OA.createitem(0)
             
                msg.To = sh.Range("C" & i).Value
                
                mailContent = sh.Cells(Range("MailContent").row, Range("MailContent").Column).Value
                
                mailSignature = sh.Cells(Range("MailSignature").row, Range("MailSignature").Column).Value
                
                If Trim(mailContent & vbNullString) = vbNullString Then
                    mailContent = "Hi " + sh.Range("E" & i).Value + "," + "<br>" + "Please find forecast as attached files."
                Else
                    mailContent = Replace(mailContent, "[NAME]", sh.Range("E" & i).Value)
                End If
                
                If Trim(mailSignature & vbNullString) = vbNullString Then
                    mailSignature = "Thanks,"
                End If
                
                
                msg.cc = sh.Range("D" & i).Value
                msg.Subject = sh.Range("F" & i).Value
                msg.HTMLBody = mailContent + "<br>" + mailSignature
                
                strAttachFile = getFilePath(sh.Range("C" & i).Value)
                msg.Attachments.Add (strAttachFile)
                
                emailList.Add Item:=sh.Cells(i, firstCell.Column), key:=sh.Cells(i, firstCell.Column)
                msg.send
                sh.Range("B" & i).Value = "Sent - OK"
            End If
        On Error GoTo 0
    Next i
    sh.Range("B3").Value = Format(Now, "dd-mm-yyyy, HH:mm:ss")
    sh.Range("B3").Interior.Color = RGB(0, 255, 7)
    
    MsgBox "All the mails have been sent successfully"
End Sub

Sub Reset_Status()
    Dim sh As Worksheet
    Set sh = ThisWorkbook.Sheets("Send_Mails")
    Dim i As Integer
    
    sh.Range("B2").Value = "Ready"
    sh.Range("B2").Interior.Color = RGB(255, 255, 255)
    sh.Range("B3").Value = "Ready"
    sh.Range("B3").Interior.Color = RGB(255, 255, 255)
    
    Dim last_row As Integer
    last_row = Application.CountA(sh.Range("C:C")) + 1
    For i = 5 To last_row
        sh.Range("B" & i).Value = ""
    Next i
End Sub

Public Function getFolderPath()
    Dim curPath As String
    Dim dirName As String
    
    curPath = ActiveWorkbook.Path
    dirName = "Email_Att_" & Format(Now, "dd-mm-yyyy")
    
    getFolderPath = curPath & "\" & dirName & "\"
End Function

Public Function getFilePath(name As String)
    Dim curPath As String
    Dim dirName As String
    Dim folderPath As String
    Dim filePath As String
    
    curPath = ActiveWorkbook.Path
    dirName = "Email_Att_" & Format(Now, "dd-mm-yyyy")
    folderPath = curPath & "\" & dirName & "\"
    filePath = folderPath & "Forecast-toSupplier-" & name & ".xlsx"
    
    getFilePath = filePath
End Function

Function Contains(col As Collection, key As Variant) As Boolean
Dim obj As Variant
On Error GoTo err
    Contains = True
    obj = col(key)
    Exit Function
err:

    Contains = False
End Function

Function RangetoHTML(rng As Range)
' Changed by Ron de Bruin 28-Oct-2006
' Working in Office 2000-2016
    Dim fso As Object
    Dim ts As Object
    Dim TempFile As String
    Dim TempWB As Workbook

    TempFile = Environ$("temp") & "\" & Format(Now, "dd-mm-yy h-mm-ss") & ".htm"

    'Copy the range and create a new workbook to past the data in
    rng.Copy
    Set TempWB = Workbooks.Add(1)
    With TempWB.Sheets(1)
        .Cells(1).PasteSpecial Paste:=8
        .Cells(1).PasteSpecial xlPasteValues, , False, False
        .Cells(1).PasteSpecial xlPasteFormats, , False, False
        .Cells(1).Select
        Application.CutCopyMode = False
        On Error Resume Next
        .DrawingObjects.Visible = True
        .DrawingObjects.Delete
        On Error GoTo 0
    End With

    'Publish the sheet to a htm file
    With TempWB.PublishObjects.Add( _
         SourceType:=xlSourceRange, _
         Filename:=TempFile, _
         Sheet:=TempWB.Sheets(1).name, _
         Source:=TempWB.Sheets(1).UsedRange.Address, _
         HtmlType:=xlHtmlStatic)
        .Publish (True)
    End With

    'Read all data from the htm file into RangetoHTML
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(TempFile).OpenAsTextStream(1, -2)
    RangetoHTML = ts.readall
    ts.Close
    RangetoHTML = Replace(RangetoHTML, "align=center x:publishsource=", _
                          "align=left x:publishsource=")

    'Close TempWB
    TempWB.Close SaveChanges:=False

    'Delete the htm file we used in this function
    Kill TempFile

    Set ts = Nothing
    Set fso = Nothing
    Set TempWB = Nothing
End Function

